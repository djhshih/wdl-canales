task bwa_mem_paired_bam {

	File ref_fasta
	# NB  64-bit bwa index files should be used
	File ref_fasta_amb
	File ref_fasta_ann
	File ref_fasta_bwt
	File ref_fasta_pac
	File ref_fasta_sa
	# optional list of contigs that are "alternative"
	File? ref_fasta_alt
	File input_bam
	String sample_id

	Int diskspace_gb = ceil(4 * size(input_bam, "GB"))
	Int cpu
	Int memory_gb
	Int preemptible_tries

	command <<<
		set -eu
		
		if [[ ! -f ${ref_fasta_sa} ]]; then
			#	index the reference fasta if it is missing
			bwa index -a bwtsw ${ref_fasta}
		fi

		# reads should be be sorted by genomic location in order to avoid bias in
		# insert size calculation during alignment; thus, sort by read name
		sambamba sort -t ${cpu} -m ${memory_gb}G -N ${input_bam} -o qname-sorted.bam
		rm ${input_bam}

		# extract reads from the BAM file and write to fifo
		# NB will *not* work if the BAM file have unpaired reads that are not marked!
		mkfifo r1.fastq
		mkfifo r2.fastq
		samtools fastq qname-sorted.bam \
			-0 marked-unpaired.fastq \
			-1 r1.fastq \
			-2 r2.fastq \
			&
		
		# consume reads from fifo, align them, mark duplicates, and 
		# create unsorted bam file with fast compression
		# difference in duplicate marking between samblaster and Picard:
		#  the first encountered read-pair of a duplicate set will considered as the 
		#  prototype instead of the 'best' read-pair
		pairfq r1.fastq r2.fastq /dev/stdout unmarked-unpaired.fastq \
			| bwa mem -Y -t ${cpu} ${ref_fasta} -p - \
			| samblaster | samtools view -b1 - \
			> unsorted.bam
		rm r1.fastq
		rm r2.fastq
		
		# sort alignments with ample RAM to avoid disk IO and create final bam file
		sambamba sort -t ${cpu} -m ${memory_gb}G unsorted.bam -o ${sample_id}.bam
		rm unsorted.bam

		# sambamba sort already created .bai but we will rename it
		mv ${sample_id}.bam.bai ${sample_id}.bai
	>>>

	output {
		File bam = "${sample_id}.bam"
		File bai = "${sample_id}.bai"
	}

	runtime {
		docker: "djhshih/seqkit:0.1"
		memory: "${memory_gb} GB"
		cpu: "${cpu}"
		disks: "local-disk ${diskspace_gb} HDD"
		preemptible: preemptible_tries
	}

}
