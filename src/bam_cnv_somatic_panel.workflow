version 1.0

# Workflow for creating a GATK CNV Panel of Normals given a list of normal samples. Supports both WGS and WES.
#
# Notes:
#
# - The intervals argument is required for both WGS and WES workflows and accepts formats compatible with the
#   GATK -L argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists).
#   These intervals will be padded on both sides by the amount specified by padding (default 250)
#   and split into bins of length specified by bin_length (default 1000; specify 0 to skip binning,
#   e.g., for WES).  For WGS, the intervals should simply cover the autosomal chromosomes (sex chromosomes may be
#   included, but care should be taken to 1) avoid creating panels of mixed sex, and 2) denoise case samples only
#   with panels containing only individuals of the same sex as the case samples).
#
# - Intervals can be blacklisted from coverage collection and all downstream steps by using the blacklist_intervals
#   argument, which accepts formats compatible with the GATK -XL argument
#   (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists).
#   This may be useful for excluding centromeric regions, etc. from analysis.  Alternatively, these regions may
#   be manually filtered from the final callset.
#
#  A reasonable blacklist for excluded intervals (-XL) can be found at:
#   hg19: gs://gatk-best-practices/somatic-b37/CNV_and_centromere_blacklist.hg19.list
#   hg38: gs://gatk-best-practices/somatic-hg38/CNV_and_centromere_blacklist.hg38liftover.list (untested)
#
# - Example invocation:
#
#       java -jar cromwell.jar run cnv_somatic_panel_workflow.wdl -i my_parameters.json
#
#############

include intervals_preprocess_intervals.task
include intervals_annotate_intervals.task
include bam_collect_counts.task
include counts_create_read_count_panel_of_normals.task

workflow bam_cnv_somatic_panel {

    input {
      ##################################
      #### required basic arguments ####
      ##################################
      File intervals
      File? blacklist_intervals
      Array[String] normal_bams
      Array[String] normal_bais
      String pon_entity_id
      File ref_fasta_dict
      File ref_fasta_fai
      File ref_fasta
      String gatk_docker

      ##################################
      #### optional basic arguments ####
      ##################################
      # If true, intervals_annotate_intervals will be run to create GC annotations and explicit GC correction
      # will be performed by the PoN generated by counts_create_read_count_panel_of_normals before PCA is performed on subsequent cases
      Boolean? do_explicit_gc_correction
      File? gatk4_jar_override
      Int? preemptible_attempts

      # Required if BAM/CRAM is in a requester pays bucket
      String? gcs_project_for_requester_pays

      ####################################################
      #### optional arguments for intervals_preprocess_intervals ####
      ####################################################
      Int? padding
      Int? bin_length
      Int? mem_gb_for_preprocess_intervals

      ##################################################
      #### optional arguments for intervals_annotate_intervals ####
      ##################################################
      File? mappability_track_bed
      File? mappability_track_bed_idx
      File? segmental_duplication_track_bed
      File? segmental_duplication_track_bed_idx
      Int? feature_query_lookahead
      Int? mem_gb_for_annotate_intervals

      ##############################################
      #### optional arguments forb count_collect_counts ####
      ##############################################
      String? collect_counts_format
      Int? mem_gb_for_collect_counts

      ##############################################################
      #### optional arguments for counts_create_read_count_panel_of_normals ####
      ##############################################################
      Float? minimum_interval_median_percentile
      Float? maximum_zeros_in_sample_percentage
      Float? maximum_zeros_in_interval_percentage
      Float? extreme_sample_median_percentile
      Boolean? do_impute_zeros
      Float? extreme_outlier_truncation_percentile
      Int? number_of_eigensamples
      Int? maximum_chunk_size
      Int? mem_gb_for_create_read_count_pon
    }

    Array[Pair[String, String]] normal_bams_and_bais = zip(normal_bams, normal_bais)

    call intervals_preprocess_intervals {
        input:
            intervals = intervals,
            blacklist_intervals = blacklist_intervals,
            ref_fasta = ref_fasta,
            ref_fasta_fai = ref_fasta_fai,
            ref_fasta_dict = ref_fasta_dict,
            padding = padding,
            bin_length = bin_length,
            gatk4_jar_override = gatk4_jar_override,
            gatk_docker = gatk_docker,
            mem_gb = mem_gb_for_preprocess_intervals,
            preemptible_attempts = preemptible_attempts
    }

    if (select_first([do_explicit_gc_correction, true])) {
        call intervals_annotate_intervals {
            input:
                intervals = intervals_preprocess_intervals.preprocessed_intervals,
                ref_fasta = ref_fasta,
                ref_fasta_fai = ref_fasta_fai,
                ref_fasta_dict = ref_fasta_dict,
                mappability_track_bed = mappability_track_bed,
                mappability_track_bed_idx = mappability_track_bed_idx,
                segmental_duplication_track_bed = segmental_duplication_track_bed,
                segmental_duplication_track_bed_idx = segmental_duplication_track_bed_idx,
                feature_query_lookahead = feature_query_lookahead,
                gatk4_jar_override = gatk4_jar_override,
                gatk_docker = gatk_docker,
                mem_gb = mem_gb_for_annotate_intervals,
                preemptible_attempts = preemptible_attempts
        }
    }

    scatter (normal_bam_and_bai in normal_bams_and_bais) {
        call bam_collect_counts {
            input:
                intervals = intervals_preprocess_intervals.preprocessed_intervals,
                bam = normal_bam_and_bai.left,
                bam_idx = normal_bam_and_bai.right,
                ref_fasta = ref_fasta,
                ref_fasta_fai = ref_fasta_fai,
                ref_fasta_dict = ref_fasta_dict,
                format = collect_counts_format,
                enable_indexing = false,
                gatk4_jar_override = gatk4_jar_override,
                gatk_docker = gatk_docker,
                mem_gb = mem_gb_for_collect_counts,
                preemptible_attempts = preemptible_attempts,
                gcs_project_for_requester_pays = gcs_project_for_requester_pays
        }
    }

    call counts_create_read_count_panel_of_normals {
        input:
            pon_entity_id = pon_entity_id,
            read_count_files = bam_collect_counts.counts,
            minimum_interval_median_percentile = minimum_interval_median_percentile,
            maximum_zeros_in_sample_percentage = maximum_zeros_in_sample_percentage,
            maximum_zeros_in_interval_percentage = maximum_zeros_in_interval_percentage,
            extreme_sample_median_percentile = extreme_sample_median_percentile,
            do_impute_zeros = do_impute_zeros,
            extreme_outlier_truncation_percentile = extreme_outlier_truncation_percentile,
            number_of_eigensamples = number_of_eigensamples,
            maximum_chunk_size = maximum_chunk_size,
            annotated_intervals = intervals_annotate_intervals.annotated_intervals,
            gatk4_jar_override = gatk4_jar_override,
            gatk_docker = gatk_docker,
            mem_gb = mem_gb_for_create_read_count_pon,
            preemptible_attempts = preemptible_attempts
    }

    output {
        File preprocessed_intervals = intervals_preprocess_intervals.preprocessed_intervals
        Array[String] read_counts_entity_ids = bam_collect_counts.entity_id
        Array[File] read_counts = bam_collect_counts.counts
        File read_count_pon = counts_create_read_count_panel_of_normals.read_count_pon
    }
}

