# Sort BAM file by read (query) name.
task bam_sort_qname {

	File input_bam
	String sample_id

	# Sorting is done is two phases
	# 1. Sort chunks in parallel
	# 2. Merge chunks
	# Phase 2 is done in single-threaded mode, which reduces the benefit
	# of multithreading (there will be little speed improvement above 8 threads)
	# This task is only faster than bam_to_fastq_paired if cpu == 8
	Int cpu
	Int memory_gb
	Int preemptible_tries

	Int memory_mb_sort = floor(0.8 * memory_gb * 1024 / cpu)
	# A lot of diskspace is required for external sorting,
	# because the data is too big to fit in RAM
	Int diskspace_gb = ceil(10 * size(input_bam, "GB"))

	command <<<
		set -eu
		
		# reads should be be sorted by genomic location in order to avoid bias in
		# insert size calculation during alignment; thus, sort by read name
		sambamba sort -t ${cpu} -m ${memory_mb_sort}M --tmpdir ./tmp -l l -N \
			-o ${sample_id}_qnsorted.bam ${input_bam}

		# since this query name sorted BAM file is meant for immediate consumption
		# downstream, we will not make an index for it
	>>>

	output {
		File bam = "${sample_id}_qnsorted.bam"
	}

	runtime {
		docker: "djhshih/seqkit:0.1"
		memory: "${memory_gb} GB"
		cpu: "${cpu}"
		disks: "local-disk ${diskspace_gb} HDD"
		preemptible: preemptible_tries
	}

}
