task bwa_mem_paired_fast {

	File ref_fasta
	# NB  64-bit bwa index files should be used
	File ref_fasta_amb
	File ref_fasta_ann
	File ref_fasta_bwt
	File ref_fasta_pac
	File ref_fasta_sa
	# optional list of contigs that are "alternative"
	File? ref_fasta_alt
	File fastq_r1_r2
	String sample_id

	Int cpu
	Int memory_gb
	Int preemptible_tries

	Int memory_mb_thread = memory_gb * 1024 / cpu
	Int diskspace_gb = ceil(5 * size(fastq_r1_r2, "GB"))

	command <<<
		set -eu
		
		if [[ ! -f ${ref_fasta_sa} ]]; then
			#	index the reference fasta if it is missing
			bwa index -a bwtsw ${ref_fasta}
		fi
		
		# align reads, mark duplicates, and create unsorted bam file with fast compression
		# difference in duplicate marking between samblaster and Picard:
		#  the first encountered read-pair of a duplicate set will considered as the 
		#  prototype instead of the 'best' read-pair
		bwa mem -Y -t ${cpu} -p ${ref_fasta} ${fastq_r1_r2} \
			| samblaster | samtools view -b1 - \
			> unsorted.bam
		rm ${fastq_r1_r2}
		
		# sort alignments with ample RAM to avoid disk IO and create final bam file
		samtools sort -@ ${cpu} -m ${memory_mb_thread}M -o ${sample_id}.bam unsorted.bam
		rm unsorted.bam

		# index the bam file
		samtools index ${sample_id}.bam ${sample_id}.bai
	>>>

	output {
		File bam = "${sample_id}.bam"
		File bai = "${sample_id}.bai"
	}

	runtime {
		docker: "djhshih/seqkit:0.1"
		memory: "${memory_gb} GB"
		cpu: "${cpu}"
		disks: "local-disk ${diskspace_gb} HDD"
		preemptible: preemptible_tries
	}

}
