task denoised_copy_ratios_plot {
    input {
      String entity_id
      File standardized_copy_ratios
      File denoised_copy_ratios
      File ref_fasta_dict
      Int? minimum_contig_length
      String? maximum_copy_ratio
      Float? point_size_copy_ratio
      String? output_dir
      File? gatk4_jar_override

      # Runtime parameters
      String gatk_docker
      Int? mem_gb
      Int? disk_space_gb
      Boolean use_ssd = false
      Int? cpu
      Int? preemptible_attempts
    }

    Int machine_mem_mb = select_first([mem_gb, 7]) * 1000
    Int command_mem_mb = machine_mem_mb - 1000

    # If optional output_dir not specified, use "out"
    String output_dir_ = select_first([output_dir, "out"])

    command <<< 
        set -e
        export GATK_LOCAL_JAR=~{default="/root/gatk.jar" gatk4_jar_override}

        gatk --java-options "-Xmx~{command_mem_mb}m -XX:+UseSerialGC" PlotDenoisedCopyRatios \
            --standardized-copy-ratios ~{standardized_copy_ratios} \
            --denoised-copy-ratios ~{denoised_copy_ratios} \
            --sequence-dictionary ~{ref_fasta_dict} \
            --minimum-contig-length ~{default="1000000" minimum_contig_length} \
            --maximum-copy-ratio ~{default="4.0" maximum_copy_ratio} \
            --point-size-copy-ratio ~{default="0.2" point_size_copy_ratio} \
            --output ~{output_dir_} \
            --output-prefix ~{entity_id}
    >>>

    runtime {
        docker: "~{gatk_docker}"
        memory: machine_mem_mb + " MB"
        disks: "local-disk " + disk_space_gb + if use_ssd then " SSD" else " HDD"
        cpu: select_first([cpu, 1])
        preemptible: select_first([preemptible_attempts, 5])
    }

    output {
        File denoised_copy_ratios_plot = "~{output_dir_}/~{entity_id}.denoised.png"
        File standardized_MAD = "~{output_dir_}/~{entity_id}.standardizedMAD.txt"
        Float standardized_MAD_value = read_float(standardized_MAD)
        File denoised_MAD = "~{output_dir_}/~{entity_id}.denoisedMAD.txt"
        Float denoised_MAD_value = read_float(denoised_MAD)
        File delta_MAD = "~{output_dir_}/~{entity_id}.deltaMAD.txt"
        Float delta_MAD_value = read_float(delta_MAD)
        File scaled_delta_MAD = "~{output_dir_}/~{entity_id}.scaledDeltaMAD.txt"
        Float scaled_delta_MAD_value = read_float(scaled_delta_MAD)
    }
}
