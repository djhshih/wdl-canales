# Align reads from a pair of fastq files using bwa mem
# and produce an aligned, duplicate-marked, sorted, and indexed BAM file.
task fastq_bwa_mem_paired_sorted {

	File ref_fasta
	# NB  64-bit bwa index files should be used
	File ref_fasta_amb
	File ref_fasta_ann
	File ref_fasta_bwt
	File ref_fasta_pac
	File ref_fasta_sa
	# optional list of contigs that are "alternative"
	File? ref_fasta_alt
	File fastq_r1
	File fastq_r2
	String sample_id

	Int cpu
	Int memory_gb
	Int preemptible_tries

	Int memory_mb_thread = floor(0.5 * memory_gb * 1024 / cpu)
	Int diskspace_gb = ceil(12 * (size(fastq_r1, "GB") + size(fastq_r2, "GB")))

	command <<<
		set -eu
		
		if [[ ! -f ${ref_fasta_sa} ]]; then
			#	index the reference fasta if it is missing
			/usr/gitc/bwa index -a bwtsw ${ref_fasta}
		fi
		
		# align reads and create unsorted bam file
		/usr/gitc/bwa mem -Y -t ${cpu} ${ref_fasta} ${fastq_r1} ${fastq_r2} \
			| samtools view -b - \
			> unsorted.bam
		rm ${fastq_r1}
		rm ${fastq_r2}
		
		# sort alignments
		samtools sort -@ ${cpu} -m ${memory_mb_thread}M -o sorted.bam unsorted.bam
		rm unsorted.bam
		
		# mark duplicates
		java -jar /usr/gitc/picard.jar MarkDuplicates \
			INPUT=sorted.bam \
			OUTPUT=${sample_id}.bam \
			METRICS_FILE=${sample_id}_picard-mark-dup_metrics.txt
		rm sorted.bam
				
		# create index for the bam file
		samtools index ${sample_id}.bam ${sample_id}.bai
	>>>

	output {
		File bam = "${sample_id}.bam"
		File bai = "${sample_id}.bai"
		File markdup_metrics = "${sample_id}_picard-mark-dup_metrics.txt"
	}

	runtime {
		docker: "broadinstitute/genomes-in-the-cloud:2.3.1-1500064817"
		memory: "${memory_gb} GB"
		cpu: "${cpu}"
		disks: "local-disk ${diskspace_gb} HDD"
	}

}
