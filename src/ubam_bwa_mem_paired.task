# Align reads in unaligned BAM of pair-end reads using bwa mem
# and produce aligned, unsorted BAM file.
task ubam_bwa_mem_paired {

	File ref_fasta
	# NB  64-bit bwa index files should be used
	File ref_fasta_amb
	File ref_fasta_ann
	File ref_fasta_bwt
	File ref_fasta_pac
	File ref_fasta_sa
	# optional list of contigs that are "alternative"
	File? ref_fasta_alt
	File input_ubam
	String sample_id

	Int cpu
	Int memory_gb
	Int preemptible_tries

	Int diskspace_gb = ceil(4 * size(input_ubam, "GB"))

	command <<<
		set -euo pipefail
		
		if [[ ! -f ${ref_fasta_sa} ]]; then
			# index the reference fasta if it is missing
			bwa index -a bwtsw ${ref_fasta}
		fi

		# extract reads from the BAM file and write to fifo
		mkfifo r1.fastq r2.fastq
		samtools fastq ${input_ubam} \
			-0 marked-unpaired.fastq \
			-1 r1.fastq \
			-2 r2.fastq \
			&
		
		# consume reads from fifos, align them, mark duplicates, and 
		# create unsorted bam file with fast compression
		# difference in duplicate marking between samblaster and Picard:
		#  the first encountered read-pair of a duplicate set will considered as the 
		#  prototype instead of the 'best' read-pair
		pairfq r1.fastq r2.fastq /dev/stdout lexical unmarked-unpaired.fastq \
			| bwa mem -Y -t ${cpu} ${ref_fasta} -p - \
			| samblaster | samtools view -b1 - \
			> ${sample_id}_aligned.bam
	>>>

	output {
		File bam = "${sample_id}_aligned.bam"
	}

	runtime {
		docker: "djhshih/seqkit:0.1"
		memory: "${memory_gb} GB"
		cpu: "${cpu}"
		disks: "local-disk ${diskspace_gb} HDD"
		preemptible: preemptible_tries
	}

}
